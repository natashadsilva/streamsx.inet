use com.ibm.streamsx.inet.ftp::*;

/**
 * This sample demonstrates the use of the ftp operators in the Internet Toolkit to
 * feed the content of files from a ftp-server into a IBM Streams application. It can be used for
 * a quick test of an ftp server connection.
 * If you want to store the user credentials securely, you should consider to use a
 * Streams Application Configuration Object. see 
 * [https://www.ibm.com/support/knowledgecenter/en/SSCRJU_4.2.0/com.ibm.streams.dev.doc/doc/creating-secure-app-configs-dev.html]
 * If you want to transfer your data securely you should consider to use the protocol `ftpSSLAll`, `ftps` or `sftp`
 * 
 * @param	protocol	The kind of ftp protocol use one of ftp, ftpSSLAll, ftpSSLControl, ftpSSLTry, ftps, sftp
 * @param	host		The name or ip of the host (may contain the portnumber separated by colon
 * @param	username	The user
 * @param	password	user password
 * @param	path		the location
 * @param	fileToTransfer	the filename to transfer
 * @param	verbosity	The verbosity of the curl lib. Use true or false
 */
public composite Main {
	param
		expression<Protocol> $protocol :      (Protocol)getSubmissionTimeValue("protocol", "ftp");
		expression<rstring> $host :           getSubmissionTimeValue("host", "speedtest.tele2.net");
		expression<rstring> $path :           getSubmissionTimeValue("path", "/");
		expression<rstring> $username :       getSubmissionTimeValue("username", "anonymous");
		expression<rstring> $password :       getSubmissionTimeValue("password", "anon@localhost");
		expression<rstring> $fileToTransfer : getSubmissionTimeValue("fileToTransfer", "1MB.zip");
		expression<boolean> $verbosity :      (boolean)getSubmissionTimeValue("verbosity", "false");

	graph
		//provide a trigger stream for the ftp directory scan
		stream<int32 count> TriggerStream = Beacon() {
			param
				initDelay : 2.0;
				iterations : 2;
				period : 10.0;
			output TriggerStream : count = (int32)IterationCount();
			config placement : partitionColocation("DIR");
		}

		//scan the remote directory
		(
			stream<rstring fileName, uint64 size, rstring date, rstring user, boolean isFile, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred, float64 speed> FilenameStream as OUT;
			//stream<rstring error> ErrorStream
			stream<rstring errorText, int32 error, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred> ErrorStream as ERR
		) = FTPReader(TriggerStream) {
			param
				protocol : $protocol;
				isDirReader : true;
				host : $host;
				path : $path;
				username : $username;
				password : $password;
				useEPSV : false;
				curlVerbose : $verbosity;
			output
				OUT :
					fileName = FileName(),
					size = FileSize(),
					date = FileDate(),
					user = FileUser(),
					isFile = IsFile(),
					//transferCount = NoTransfers(),
					transferCount = TransferCount(),
					//failureCount =  NoTransferFailures(),
					failureCount = TransferFailureCount(),
					//bytesTransferred = NoBytesTransferred();
					bytesTransferred = BytesTransferred(),
					speed = TransferSpeed();
				ERR:
					errorText = ErrorText(),
					//error = Error(),
					error = ErrorCode(),
					//transferCount = NoTransfers(),
					transferCount = TransferCount(),
					//failureCount =  NoTransferFailures(),
					failureCount =  TransferFailureCount(),
					//bytesTransferred = NoBytesTransferred();
					bytesTransferred = BytesTransferred();
			config placement : partitionColocation("DIR");
		}
		//print the results
		() as DirTap = ResultSink(FilenameStream) {
			param
				what : "DIRSCAN: ";
				loc : "DIRTAP";
		}
		() as ErrorTap = ResultSink(ErrorStream) {
			param
				what : "DIRERROR: ";
				loc : "DIRTAP";
		}

		//Filter out one file which is transferred
		stream<IN> FilteredFilenameStream = Filter(FilenameStream as IN) {
			param
				filter: isFile && fileName == $fileToTransfer;
		}

		//get bin files
		(
			stream<blob content, int32 sequence, rstring file, rstring url, float64 speed> BinFileStream as OUT;
			stream<rstring errorText, int32 error, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred> BinErrorStream as ERR
		) = FTPReader(FilteredFilenameStream as IN) {
			param
				protocol : $protocol;
				host : $host;
				path : $path;
				filename : IN.fileName;
				username : $username;
				password : $password;
				connectionCloseMode : ever;
				curlVerbose : $verbosity;
			output
				OUT :
					content = Binary(),
					sequence = Sequence(),
					file = IN.fileName,
					url = Url(),
					speed = TransferSpeed();
				ERR:
					errorText = ErrorText(),
					//error = Error(),
					error = ErrorCode(),
					//transferCount = NoTransfers(),
					transferCount = TransferCount(),
					//failureCount =  NoTransferFailures(),
					failureCount =  TransferFailureCount(),
					//bytesTransferred = NoBytesTransferred();
					bytesTransferred = BytesTransferred();
			config placement : partitionColocation("BIN");
		}

		//print the results
		() as BinTap = ResultSink(BinFileStream) {
			param
				what : "BINDATA: ";
				loc : "BINTAP";
		}
		() as BinErrorTap = ResultSink(BinErrorStream) {
			param
				what : "BINERROR: ";
				loc : "BINTAP";
		}
	
}

composite ResultSink (input IN) {
	param
		expression<rstring> $what;
		expression<rstring> $loc;
	graph
		() as Sink = Custom(IN) {
			logic
				state : rstring what_ = $what;
				onTuple IN : {
					timestamp t = getTimestamp();
					rstring str = ctime(t) + " " + (rstring)getNanoseconds(t) + (rstring)IN;
					printStringLn(what_ + str);
				}
				onPunct IN : {
					timestamp t = getTimestamp();
					rstring str = ctime(t) + " " + (rstring)getNanoseconds(t) + " " + (rstring)currentPunct();
					printStringLn(what_ + str);
				}
			config placement : partitionColocation($loc);
		}
}
